const _ = require("lodash")
const arrz = require("array_helperz")
class ArrayOfObjectsHBSHelper {
    /**
     * let array = new ArrayOfObject()
     * @returns {any}
     */
    constructor() {}

    /**
* @example
{{countByCondition problem "status" "to do"}}
*/
    countByCondition(array, key, value) {
        let count = arrz.countByCondition(array, key, value)
        console.log(count)
        return count;
    }

    /**
* @example
* {{#filterValues problem "you" "whatshouldbe"}}

<div class="message">
<div class="content">
hi
{{problem}}<br />
{{whatshouldbe}}<br />
{{whatactuallyis}}<br />
{{hypothesis}}
</div>
</div>
{{/filterValues}}
*/
    filterValues(array, keyword, value, options) {
        let result = arrz.filterValues(array, keyword, [value])
        let stringed = ""
        if (result.length >= 1) {
            for (let i = 0; i < result.length; i++) {
                stringed += options.fn(
                    result[i]
                )

            }
            return stringed;
        } else {
            return ""
        }
    }

    /**
     * @example
     * {{#sortAsc problem "seconds" "string"}}
     * {{problem}} {{whatshouldbe}}
{{/sortAsc}}
     */
    sortAsc(array, property, options) {
            let result = arrz.sortAsc(array, property)
            let stringed = ""
            for (let i = 0; i < result.length; i++) {
                stringed += options.fn(
                    result[i]
                )

            }
            return stringed;
        }
        /**
* @example
* {{#sortAsc problem "seconds" "string"}}
* {{problem}} {{whatshouldbe}}
{{/sortAsc}}
*/
    sortDesc(array, property, options) {
            let result = arrz.sortDesc(array, property)
            let stringed = ""
            for (let i = 0; i < result.length; i++) {
                stringed += options.fn(
                    result[i]
                )

            }
            return stringed;
        }
        /**
* @example
* {{#arrContains problem "status" "doing"}}
<div class="message">{{problem}}
{{whatactuallyis}}
{{whatshouldbe}}
{{hypothesis}}{{plan}}</div>
{{/arrContains}}
* @author lezzles11 :) - www.github.com/lezzles11
* @date 2022-02-17
* @param {array} array
* @param {any} property
* @returns {array} of objects
*/
    contains(array, property, value, options) {
            let stringed = ""
            let contains = arrz.contains(array, property, value);
            for (let i = 0; i < contains.length; i++) {
                stringed += options.fn(
                    contains[i]
                )

            }
            return stringed;
        }
        /**
* @example
* {{#doesNotContain problem "status" "doing"}}
<div class="message">{{problem}}
{{whatactuallyis}}
{{whatshouldbe}}
{{hypothesis}}{{plan}}</div>
{{/doesNotContain}}
*/
    doesNotContain(array, property, value, options) {
            let result = arrz.doesNotContain(array, property, value)
            let stringed = ""
            for (let i = 0; i < result.length; i++) {
                stringed += options.fn(
                    result[i]
                )

            }
            return stringed;
        }
        /**
* 
* @example
* {{#filterAndSort problem 5 "hi" "problem" "string" true }}
{{problem}}
{{whatactuallyis}}
{{whatshouldbe}}
{{hypothesis}}{{plan}}
{{/filterAndSort}}

*/
    filterAndSort(data, limit, keyword, sortValue, sortType, asc = true, options) {
        let result = arrz.filterAndSort(data, keyword, ["problem"], sortValue, sortType, asc, limit)
        let length = result.length
        console.log("ðŸš€ ~ file: array.js ~ line 259 ~ ArrayOfObjectsHelper ~ filterAndSort ~ length", length)
        let stringed = ""
        for (let i = 0; i < result.length; i++) {
            stringed += options.fn(
                result[i]
            )

        }
        return stringed;

    }

    /**
     * group(array, "status")
     * @example
     * group(array, "status")
     */
    group(data, groupByCondition, options) {
        let result = arrz.group(data, groupByCondition)
        let stringed = ""
        for (let i = 0; i < result.length; i++) {
            stringed += options.fn(
                result[i]
            )

        }
        return stringed;
    }



}
let hbsArrz = new ArrayOfObjectsHBSHelper()
module.exports = { hbsArrz }