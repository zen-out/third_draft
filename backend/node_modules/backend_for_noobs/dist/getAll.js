const _ = require("lodash")
const arrz = require("array_helperz")
const make_legit = require("make_legit")
const { upset } = require("whats_wrong")
const { knex } = require("./knex")

async function getAllUsers(knex) {
    let users = await knex("user").select("*")

    let trimmed = make_legit.trimArr(users)
    return trimmed;
}
async function getAllHourglass(knex, user_id) {
    let hourglass = await knex("hourglass").select("id as hourglass_id", "seconds", "user_id", "importance", "difficulty", "email", "start", "edit", "end", "public", "status", "usefulness", "created").where({ user_id: user_id })
    let sorted = arrz.sortDesc(hourglass, "created", "date")
    return make_legit.trimArr(sorted);
}
async function getAllProblems(knex, user_id) {
    user_id = parseInt(user_id)
    let hourglass = await getAllHourglass(knex, user_id)
    let problems = await knex("problem").select("id as problem_id", "problem", "whatshouldbe", "whatactuallyis", "hypothesis", "plan", "hourglass_id").where({ user_id: user_id })
    let merged = _.map(problems, function(p) {
        if (p) {
            p["table_name"] = "problem"
            return _.merge(
                p,
                _.find(hourglass, {
                    hourglass_id: p.hourglass_id
                })
            )
        }
    })

    let sorted = arrz.sortDesc(merged, "created", "date")
        // return sorted;
    return make_legit.trimArr(sorted);
}
async function getAllCheatsheets(knex, user_id) {
    user_id = parseInt(user_id)
    let hourglass;
    let cheatsheets;
    try {
        hourglass = await getAllHourglass(knex, user_id)
        cheatsheets = await knex("cheatsheet").select("id as cheatsheet_id", "problem_id", "title", "key_info", "description", "notes", "structure", "hourglass_id").where({ user_id: user_id })
    } catch (error) {
        return upset(error)
    }
    let merged = _.map(cheatsheets, function(p) {
            if (p) {
                p["table_name"] = "cheatsheet"
                return _.merge(
                    p,
                    _.find(hourglass, {
                        hourglass_id: p.hourglass_id
                    })
                )
            }
        })
        // let trimmed = make_legit.trimArr(merged)
    let sorted = arrz.sortDesc(merged, "created", "date")
    return sorted;
}
async function getAllTasks(knex, user_id) {
    user_id = parseInt(user_id)
    let hourglass;
    let tasks;
    try {
        hourglass = await getAllHourglass(knex, user_id)
        tasks = await knex("task").select("id as task_id", "problem_id", "cheatsheet_id", "name", "hourglass_id").where({ user_id: user_id })
    } catch (error) {
        return upset(error)
    }
    let merged = _.map(tasks, function(p) {
        if (p) {
            p["table_name"] = "task"
            return _.merge(
                p,
                _.find(hourglass, {
                    hourglass_id: p.hourglass_id
                })
            )
        }
    })

    let sorted = arrz.sortDesc(merged, "created", "date")
        // return sorted;
    return make_legit.trimArr(sorted);
}
async function getAllTagSnippets(knex, user_id) {


    user_id = parseInt(user_id)
    let hourglass;
    let tag_snippets;
    try {
        hourglass = await getAllHourglass(knex, user_id)
        tag_snippets = await knex("tag_snippet").select("id as tag_snippet_id", "problem_id", "cheatsheet_id", "hourglass_id", "task_id", "tag", "snippet", "link").where({ user_id: user_id })
    } catch (error) {
        return upset(error)
    }
    let merged = _.map(tag_snippets, function(p) {
        if (p) {
            p["table_name"] = "tag_snippet"
            return _.merge(
                p,
                _.find(hourglass, {
                    hourglass_id: p.hourglass_id
                })
            )
        }
    })

    let sorted = arrz.sortDesc(tag_snippets, "created", "date")
        // return sorted;
    return make_legit.trimArr(sorted);
}
async function testGetAll() {
    let hourglass = await getAllHourglass(knex, 1)
    let problems = await getAllProblems(knex, 1)
        // console.log(problems.slice(0, 4))
        // let tasks = await getAllTasks(knex, 1)
        // console.log(tasks[0])
        // let tagsnippets = await getAllTagSnippets(knex, 1)
        // console.log(tagsnippets[0])
    let cheatsheets = await getAllCheatsheets(knex, 1)
    console.log(cheatsheets[0])
}
// testGetAll()


module.exports = { getAllUsers, getAllHourglass, getAllProblems, getAllCheatsheets, getAllTasks, getAllTagSnippets, testGetAll };