const { extend } = require("lodash")
const { upset } = require("whats_wrong")
const { see } = require("code_clarity")
const ef = require("effective_knex")
const arrz = require("array_helperz")
const when_you_free = require("when_you_free")
const { knex } = require("./knex")
const validator = require("validator")
    /**
     * @example
     * 
    /**
     * @example
     * let sampleObject = {
            email: "asdfasdf213@gmdail.com",
            password: "asdfasdf",
            type: "chrome",
            device: "desktop"
        }
        let sampleObject2 = {
                email: "lesle3yc2@gmail.com",
                password: "orangeorange"
            }
            // let firstSignup = await signup(knex, sampleObject)
            // see.done("signup", firstSignup)
        let firstLogin = await login(knex, sampleObject)
        see.done("login", firstLogin)
        let verify = await verifyUserRoute(knex, 18, 14)
        see.done("verify route" + verify)
     * @author zen-out
     * @date 2022-03-20
     * @returns {any}
     */
async function signup(knex, userObject) {
    let isEmail = validator.isEmail(userObject.email)
    if (isEmail !== true) {
        return upset("not valid email", "signup.js", "should enter valid email")
    }
    let email_exists = await ef.getObjectCount(knex, "user", {
        email: userObject.email,
    })
    if (email_exists === 1) {
        return upset("already a registered user", "already registered", "go to login page")
    }
    let user_array_from_db = await ef.getObjectCount(knex, "user", {
        email: userObject.email,
        password: userObject.password,
    })
    let user_time = await when_you_free.getCurrentTime(userObject.timezone)
    let postUser = await ef.post(knex, "user", {
        timezone: userObject.timezone,
        email: userObject.email,
        password: userObject.password,
        last_login: user_time,
        logged_in: true
    })
    postUser["user_id"] = postUser.id
    delete postUser["password"]
    return postUser;
}



/**
 * @example
 * let sampleObject = {
        email: "asdfasdf213@gmdail.com",
        password: "asdfasdf",
        type: "chrome",
        device: "desktop"
    }
    let sampleObject2 = {
            email: "lesle3yc2@gmail.com",
            password: "orangeorange"
        }
        // let firstSignup = await signup(knex, sampleObject)
        // see.done("signup", firstSignup)
    let firstLogin = await login(knex, sampleObject)
    see.done("login", firstLogin)
    let verify = await verifyUserRoute(knex, 18, 14)
    see.done("verify route" + verify)
 * @author zen-out
 * @date 2022-03-20
 * @param {any} knex
 * @param {any}  userObject
 * @returns {any}
 */
async function login(knex, userObject) {
    let email = userObject["email"]
    let password = userObject['password']
    let email_exists = await ef.getObjectCount(knex, "user", { email: email })
    if (email_exists === 0) {
        return upset("havent signed up yet", "in know_youre_real", "go to signup page")
    }

    let email_pass_exists = await ef.getObjectCount(knex, "user", { email: email, password: password })
    if (email_pass_exists === 0) {
        return upset("wrong password", "in know_youre_real", "email lesley.yc@gmail.com")
    }
    let get_user = await ef.getByObject(knex, "user", { email: email, password: password })
    let user_object = await ef.getObject(get_user)
    let get_timezone = await when_you_free.getCurrentTime(user_object.timezone)
    let updateObject = {
        logged_in: true,
        last_login: get_timezone
    }
    let get_update = await ef.update(knex, "user", user_object.id, updateObject)
    delete get_update["password"]
    get_update["user_id"] = user_object.id
    return get_update;
}


/**
 * @example
    // let verify = await verifyUserRoute(sampleRequest, knex)
 * @description 
    1. Checks if user is logged in 
    2. Checks if the last logged in date is within 14 days
 * @author zen-out
 * @date 2022-03-16
 * @param {any} req
 * @param {any}  res
 * @param {any}  next
 * @returns {boolean}
 */
async function verifyUserRoute(knex, user_id, dateSinceLastLogin = 14) {
    let get_user = await ef.getOneById(knex, "user", user_id)
    delete get_user["password"]
    let last_login_check = await when_you_free.dateIsWithinLimit(get_user.last_login, dateSinceLastLogin)
    let logged_in_check = get_user["logged_in"] === true
    if (logged_in_check && last_login_check) {
        return true;
    } else {
        return false;
    }
}

async function getOneUserById(knex, user_id) {
    let get_user = await ef.getOneById(knex, "user", user_id)
    delete get_user["password"]
    return get_user;
}

// testPostDevice()
/**
 * @example
 *     // let test_logout = await logout(knex, 18)
 * @author zen-out
 * @date 2022-03-20
 * @param {any} knex
 * @param {any}  number
 * @returns {boolean}
 */
async function logout(knex, id) {
    let updateLoggedIn = await ef.getOneByKeyAndValue(knex, "user", "id", id)

    if (updateLoggedIn["logged_in"] === true) {
        let update = await ef.updateOne(knex, "user", id, "logged_in", false)
        return true;
    } else {
        return true;
    }
}


// testBcrypt()

async function testLogin() {
    let userOne = { name: "cyrus", email: "cyrus@cyrus.com", password: "cyrus", timezone: "Asia/Bangkok" }
    let user = await getOneUserById(knex, 3)
    console.log(user)

    // console.log("ðŸš€ ~ file: auth.js ~ line 157 ~ testLogin ~ user", user)    // let user = await signup(knex, userOne)

    // let user_login = await login(knex, userOne)
    // console.log(user_login)

    // let verify = await verifyUserRoute(knex, 3)
    // console.log(verify)
    // let user_logout = await logout(knex, 3)
    // console.log(user_logout)


    // let verify = await verifyUserRoute(knex, 3)
    // console.log(verify)

}
module.exports = { getOneUserById, signup, login, verifyUserRoute, logout };