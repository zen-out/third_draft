const _ = require("lodash")
const { see } = require("code_clarity")
const ef = require("effective_knex")
const arrz = require("array_helperz")
const { getAllProblems, getAllCheatsheets, getAllTasks, getAllTagSnippets, } = require("./getAll.js")
const { getOneCheatsheetById, getOneTaskById, getOneTagSnippetById } = require("./getOne.js")
const { knex } = require("./knex")


/**********************************************
 * Joins
 * ==================================
 * For all joins: 
 * - Get all 
 * - Get One 
 * - Add task to master 
 * 
 * - [ x] Get all problem tasks
 * - [ x] Get one problem task 
 * - [ x] Add task to problem
 * - [ x] Get all problem cheatsheets
 * - [x ] Get one problem cheatsheets
 * - [x ] Add cheatsheet to problem
 * - [x ] Get all problem tag snippets
 * - [x ] Get one problem tag snippets
 * - [x ] Add tag snippet to problem
 ***********************************************/

/**********************************************
 * Problem - Cheatsheet
 * ==================================
 * - add
 * - get all 
 * - get one
 ***********************************************/

async function getProblemCheatsheets(knex, user_id) {
    // get problem
    let problems = await getAllProblems(knex, user_id)
    let cheatsheets = await getAllCheatsheets(knex, user_id)
    let obj1 = {
        data: cheatsheets,
        key: "problem_id"
    }
    let obj2 = {
        data: problems,
        key: "problem_id"
    }
    let getProblemCheatsheets = arrz.makeChildOfAnother(obj2, obj1)
    for (let i = 0; i < getProblemCheatsheets.length; i++) {
        getProblemCheatsheets[i]["cheatsheet"] = getProblemCheatsheets[i]["child"]
        delete getProblemCheatsheets[i]["child"]
    }
    return getProblemCheatsheets;
}
async function getOneProblemCheatsheets(knex, user_id, problem_id) {
    let problem_cheatsheets = await getProblemCheatsheets(knex, user_id)
    let filtered_array = arrz.filterWithFuncObjectOrString(problem_cheatsheets, { problem_id: problem_id })
    return ef.getObject(filtered_array);
}

/**********************************************
 * Problem - Task
 * ==================================
 * - get all 
 * - get one
 ***********************************************/

async function getAllProblemTasks(knex, user_id) {
    let getProblems = await getAllProblems(knex, user_id)
    let getTasks = await getAllTasks(knex, user_id)
    let obj1 = {
        data: getProblems,
        key: "problem_id",
    }
    let obj2 = { data: getTasks, key: "problem_id" }
    let getProblemTasks = arrz.makeChildOfAnother(obj1, obj2)
    for (let i = 0; i < getProblemTasks.length; i++) {
        getProblemTasks[i]["task"] = getProblemTasks[i]["child"]
        delete getProblemTasks[i]["child"]
    }
    return getProblemTasks;
}


async function getOneProblemTasks(knex, user_id, problem_id) {
    let problem_tasks = await getAllProblemTasks(knex, user_id)
    let filtered_array = arrz.filterWithFuncObjectOrString(problem_tasks, { problem_id: problem_id })
    return ef.getObject(filtered_array);
}


async function getAllTaskProblems(knex, user_id) {
    let getProblems = await getAllProblems(knex, user_id)
    let getTasks = await getAllTasks(knex, user_id)
    let obj1 = {
        data: getProblems,
        key: "problem_id",
    }
    let obj2 = { data: getTasks, key: "problem_id" }
    let getProblemTasks = arrz.makeChildOfAnother(obj2, obj1)
    for (let i = 0; i < getProblemTasks.length; i++) {
        getProblemTasks[i]["problem"] = getProblemTasks[i]["child"]
        delete getProblemTasks[i]["child"]
    }
    return getProblemTasks;
}


async function getAllTaskCheatsheets(knex, user_id) {
    let getProblems = await getAllCheatsheets(knex, user_id)
    let getTasks = await getAllTasks(knex, user_id)
    let obj1 = {
        data: getProblems,
        key: "cheatsheet_id",
    }
    let obj2 = { data: getTasks, key: "cheatsheet_id" }
    let getProblemTasks = arrz.makeChildOfAnother(obj2, obj1)
    for (let i = 0; i < getProblemTasks.length; i++) {
        getProblemTasks[i]["cheatsheet"] = getProblemTasks[i]["child"]
        delete getProblemTasks[i]["child"]
    }
    return getProblemTasks;
}

async function getAllTaskJoins(knex, user_id) {
    let task_problems = await getAllTaskProblems(knex, user_id)
    let task_cheatsheets = await getAllTaskCheatsheets(knex, user_id)
    let task_tags = await getAllTaskTagSnippets(knex, user_id)
    let first_merge = arrz.mergeByKeys({ data: task_problems, key: "task_id" }, { data: task_cheatsheets, key: "task_id" })
    let merges = arrz.mergeByKeys({ data: first_merge, key: "task_id" }, { data: task_tags, key: "task_id" })
    return merges
}
async function getOneTaskJoin(knex, user_id, task_id) {
    let joins = await getAllTaskJoins(knex, user_id)
    let filtered_array = arrz.filterWithFuncObjectOrString(joins, { task_id: task_id })
    return ef.getObject(filtered_array);
}
/**********************************************
 * Problem - Tag Snippet
 * ==================================
 * - get
 * - one
 ***********************************************/


async function getProblemTagSnippets(knex, user_id) {
    // get tag_snippet
    let problems = await getAllProblems(knex, user_id)
    let tags = await getAllTagSnippets(knex, user_id)
    let obj1 = { data: problems, key: "problem_id" }
    let obj2 = { data: tags, key: "problem_id" }
    let getProblemTags = arrz.makeChildOfAnother(obj1, obj2)
    for (let i = 0; i < getProblemTags.length; i++) {
        getProblemTags[i]["tag_snippet"] = getProblemTags[i]["child"]
        delete getProblemTags[i]["child"]
    }
    return getProblemTags;
}
async function getOneProblemTagSnippets(knex, user_id, problem_id) {
    let problem_tag_snippet = await getProblemTagSnippets(knex, user_id)
    let filtered_array = arrz.filterWithFuncObjectOrString(problem_tag_snippet, { problem_id: problem_id })
    return ef.getObject(filtered_array);
}


/**********************************************
 * Cheatsheet - Problem
 * ==================================
 * - get all 
 * - get one
 ***********************************************/

async function getAllCheatsheetProblems(knex, user_id) {
    let cheatsheets = await getAllCheatsheets(knex, user_id)
    let problems = await getAllProblems(knex, user_id)
    let obj1 = { data: cheatsheets, key: "problem_id" }
    let obj2 = { data: problems, key: "problem_id" }
    let joined = arrz.makeChildOfAnother(obj1, obj2)
    for (let i = 0; i < joined.length; i++) {
        joined[i]["problem"] = joined[i]["child"]
        delete joined[i]["child"]
    }
    return joined;
}
async function getOneCheatsheetProblem(knex, user_id, cheatsheet_id) {
    let cheatsheet_problems = await getAllCheatsheetProblems(knex, user_id)
    let filtered_array = arrz.filterWithFuncObjectOrString(cheatsheet_problems, { cheatsheet_id: cheatsheet_id })
    return ef.getObject(filtered_array);
}


/**********************************************
 * Cheatsheet - Task
 * ==================================
 * - add 
 * - get all 
 * - get one
 ***********************************************/

async function getAllCheatsheetTasks(knex, user_id) {
    let cheatsheets = await getAllCheatsheets(knex, user_id)
    let tasks = await getAllTasks(knex, user_id)
    let obj1 = { data: cheatsheets, key: "cheatsheet_id" }
    let obj2 = { data: tasks, key: "cheatsheet_id" }
    let getCheatsheetTasks = arrz.makeChildOfAnother(obj1, obj2)
    for (let i = 0; i < getCheatsheetTasks.length; i++) {
        getCheatsheetTasks[i]["task"] = getCheatsheetTasks[i]["child"]
        delete getCheatsheetTasks[i]["child"]
    }
    return getCheatsheetTasks;
}
async function getOneCheatsheetTask(knex, user_id, cheatsheet_id) {
    let cheatsheet_tasks = await getAllCheatsheetTasks(knex, user_id)
    let filtered_array = arrz.filterWithFuncObjectOrString(cheatsheet_tasks, { cheatsheet_id: cheatsheet_id })
    return ef.getObject(filtered_array);
}

/**********************************************
 * Cheatsheet - Tag Snippet
 * ==================================
 * - get all 
 * - get one
 ***********************************************/


async function getAllCheatsheetTagSnippets(knex, user_id) {
    let cheatsheets = await getAllCheatsheets(knex, user_id)
    let tags = await getAllTagSnippets(knex, user_id)
    let obj1 = { data: cheatsheets, key: "cheatsheet_id" }
    let obj2 = { data: tags, key: "cheatsheet_id" }
    let getCheatsheetTags = arrz.makeChildOfAnother(obj1, obj2)
    for (let i = 0; i < getCheatsheetTags.length; i++) {
        getCheatsheetTags[i]["tag_snippet"] = getCheatsheetTags[i]["child"]
        delete getCheatsheetTags[i]["child"]
    }
    return getCheatsheetTags;
}

async function getOneCheatsheetTagSnippet(knex, user_id, cheatsheet_id) {
    let cheatsheet_tags = await getAllCheatsheetTagSnippets(knex, user_id)
    let filtered_array = arrz.filterWithFuncObjectOrString(cheatsheet_tags, { cheatsheet_id: cheatsheet_id })
    return ef.getObject(filtered_array);
}

/**********************************************
 * Task - Tag Snippet
 * ==================================
 * - get all 
 * - get one 
 ***********************************************/

async function getAllTaskTagSnippets(knex, user_id) {
    let tasks = await getAllTasks(knex, user_id)
    let tags = await getAllTagSnippets(knex, user_id)
    let obj1 = { data: tasks, key: "task_id" }
    let obj2 = { data: tags, key: "task_id" }
    let getTaskTags = arrz.makeChildOfAnother(obj1, obj2)
    for (let i = 0; i < getTaskTags.length; i++) {
        getTaskTags[i]["tag_snippet"] = getTaskTags[i]["child"]
        delete getTaskTags[i]["child"]
    }
    return getTaskTags;
}

async function getOneTaskTagSnippets(knex, user_id, task_id) {
    let task_tags = await getAllTaskTagSnippets(knex, user_id)
    let filtered_array = arrz.filterWithFuncObjectOrString(task_tags, { task_id: task_id })
    return ef.getObject(filtered_array);
}
async function getAllProblemJoins(knex, user_id) {
    let problem_cheatsheets = await getProblemCheatsheets(knex, user_id)
    let problem_tasks = await getAllProblemTasks(knex, user_id)
    let get_problem_tag_snippets = await getProblemTagSnippets(knex, user_id)
    let cheatsheet_task = arrz.mergeByKeys({ data: problem_cheatsheets, key: "problem_id" }, { data: problem_tasks, key: "problem_id" })
    let finalMerge = arrz.mergeByKeys({ data: problem_cheatsheets, key: "problem_id" }, { data: get_problem_tag_snippets, key: "problem_id" })
    return finalMerge
}
async function getOneProblemJoin(knex, user_id, problem_id) {
    let joins = await getAllProblemJoins(knex, user_id)
    let filtered_array = arrz.filterWithFuncObjectOrString(joins, { problem_id: problem_id })
    return ef.getObject(filtered_array);
}



async function getAllCheatsheetJoins(knex, user_id) {
    let cheatsheet_problems = await getAllCheatsheetProblems(knex, user_id)
    let cheatsheet_tasks = await getAllCheatsheetTasks(knex, user_id)
    let cheatsheet_tags = await getAllCheatsheetTagSnippets(knex, user_id)
    let cheatsheet_merge = arrz.mergeByKeys({ data: cheatsheet_problems, key: "cheatsheet_id" }, { data: cheatsheet_tasks, key: "cheatsheet_id" })
    let merges = arrz.mergeByKeys({ data: cheatsheet_merge, key: "cheatsheet_id" }, { data: cheatsheet_tags, key: "cheatsheet_id" })
    return merges
}
async function getOneCheatsheetJoin(knex, user_id, cheatsheet_id) {
    let joins = await getAllCheatsheetJoins(knex, user_id)
    let filtered_array = arrz.filterWithFuncObjectOrString(joins, { cheatsheet_id: cheatsheet_id })
    return ef.getObject(filtered_array);
}
async function getAllTagSnippetProblems(knex, user_id) {
    let tags = await getAllTagSnippets(knex, user_id)
    let problems_with_tag = await getAllProblems(knex, user_id)
    let obj1 = { data: tags, key: "problem_id" }
    let obj2 = { data: problems_with_tag, key: "problem_id" }
    let getTagWithProblems = arrz.makeChildOfAnother(obj1, obj2)
    for (let i = 0; i < getTagWithProblems.length; i++) {
        getTagWithProblems[i]["problem"] = getTagWithProblems[i]["child"]
        delete getTagWithProblems[i]["child"]
    }
    return getTagWithProblems;
}

async function getAllTagSnippetCheatsheets(knex, user_id) {
    let tags = await getAllTagSnippets(knex, user_id)
    let cheatsheets_with_tag = await getAllCheatsheets(knex, user_id)
    let obj1 = { data: tags, key: "cheatsheet_id" }
    let obj2 = { data: cheatsheets_with_tag, key: "cheatsheet_id" }
    let formatted = arrz.makeChildOfAnother(obj1, obj2)
    for (let i = 0; i < formatted.length; i++) {
        formatted[i]["cheatsheet"] = formatted[i]["child"]
        delete formatted[i]["child"]
    }
    return formatted;
}


async function getAllTagSnippetTasks(knex, user_id) {
    let tags = await getAllTagSnippets(knex, user_id)
    let tasks_with_tag = await getAllTasks(knex, user_id)
    let obj1 = { data: tags, key: "task_id" }
    let obj2 = { data: tasks_with_tag, key: "task_id" }
    let formatted = arrz.makeChildOfAnother(obj1, obj2)
    for (let i = 0; i < formatted.length; i++) {
        formatted[i]["task"] = formatted[i]["child"]
        delete formatted[i]["child"]
    }
    return formatted;
}


async function getAllTagSnippetJoins(knex, user_id) {
    let tag_problems = await getAllTagSnippetProblems(knex, user_id)
    let tag_cheatsheets = await getAllTagSnippetCheatsheets(knex, user_id)
    let tag_tasks = await getAllTagSnippetTasks(knex, user_id)
    let cheatsheet_task = arrz.mergeByKeys({ data: tag_problems, key: "tag_snippet_id" }, { data: tag_cheatsheets, key: "tag_snippet_id" })
    let finalMerge = arrz.mergeByKeys({ data: cheatsheet_task, key: "tag_snippet_id" }, { data: tag_tasks, key: "tag_snippet_id" })
    return finalMerge
}
async function getOneTagSnippetJoin(knex, user_id, tag_snippet_id) {
    let joins = await getAllTagSnippetJoins(knex, user_id)
    let filtered_array = arrz.filterWithFuncObjectOrString(joins, { tag_snippet_id: tag_snippet_id })
    return ef.getObject(filtered_array);
}
async function testOneToMany() {
    let task_join = await getOneTaskJoin(knex, 1, 4)
    console.log("🚀 ~ file: oneToMany.js ~ line 362 ~ testOneToMany ~ task_join", task_join)

    let tag_snippet_join = await getOneTagSnippetJoin(knex, 1, 1)
        // get all joins 
    let get_all = await getAllProblemJoins(knex, 1)
        // console.log(get_all)
    let get_all_problem_joins = await getOneProblemJoin(knex, 1, 139)
    let get_all_cheatsheet = await getOneCheatsheetJoin(knex, 1, 10)

    let problem_cheatsheets = await getProblemCheatsheets(knex, 1)
    let get_one_problem_cheatsheets = await getOneProblemCheatsheets(knex, 1, 139)
    let problemTasks = await getAllProblemTasks(knex, 1)
    let oneProblemTasks = await getOneProblemTasks(knex, 1, 139)
    let get_problem_tag_snippets = await getProblemTagSnippets(knex, 1)
    let get_one_problem_tag_snippets = await getOneProblemTagSnippets(knex, 1, 13)
    let get_cheatsheet_tasks = await getAllCheatsheetTasks(knex, 1)
    let get_one_cheatsheet_task = await getOneCheatsheetTask(knex, 1, 10)
    let get_cheatsheet_tags = await getAllCheatsheetTagSnippets(knex, 1)
    let get_one_cheatsheet_tag = await getOneCheatsheetTagSnippet(knex, 1, 10)
    let get_all_task_tag = await getAllTaskTagSnippets(knex, 1)
    let get_one_task_tag = await getOneTaskTagSnippets(knex, 1, 10)

}
// testOneToMany()


module.exports = { getProblemCheatsheets, getOneProblemCheatsheets, getAllProblemTasks, getOneProblemTasks, getAllTaskProblems, getAllTaskCheatsheets, getAllTaskJoins, getOneTaskJoin, getProblemTagSnippets, getOneProblemTagSnippets, getAllCheatsheetProblems, getOneCheatsheetProblem, getAllCheatsheetTasks, getOneCheatsheetTask, getAllCheatsheetTagSnippets, getOneCheatsheetTagSnippet, getAllTaskTagSnippets, getOneTaskTagSnippets, getAllProblemJoins, getOneProblemJoin, getAllCheatsheetJoins, getOneCheatsheetJoin, getAllTagSnippetProblems, getAllTagSnippetCheatsheets, getAllTagSnippetTasks, getAllTagSnippetJoins, getOneTagSnippetJoin, testOneToMany };