const express = require("express")
const { see, hourglass } = require("code_clarity")
const router = express.Router()
const { verifyLogin } = require("./middleware.js")
const arrz = require("array_helperz")
const noobs = require("backend_for_noobs")
const ef = require("effective_knex")

const { knex } = require("./knex")


router.get("/signup", async(req, res, next) => {
    res.render("pages/signup", { layout: "auth", title: "Signup", subtitle: "", quote_text: "Setting daily goals and getting them done on time is the key to a balanced life." })
})

router.get("/login", async(req, res, next) => {
    res.render("pages/login", { layout: "auth", title: "Login", subtitle: "", quote_text: "Never leave till tomorrow that which you can do today." })
})
router.get("/forgot_pass", async(req, res, next) => {
    res.render("pages/forgot_pass", { layout: "auth", title: "Forgot Password?", subtitle: "Happens to the best of us", quote_text: "Details are key" })
})


router.get("/dashboard/:user_id", verifyLogin, async(req, res, next) => {
    let user_id = parseInt(req.body.user_id)
    try {
        let problem_count = await ef.getObjectCount(knex, "problem", { user_id: user_id })
        see.should("first count how many problems there are")
        see.is(problem_count)
        if (problem_count === 0) {
            see.should("return an empty array if there are no current problems")
            res.render("pages/dashboard", { data: [], layout: "main", title: "Dashboard", subtitle: "What marks out good thinking is that it is precise." })
        } else {
            results = await noobs.getAllProblemJoins(knex, user_id)
            see.should("return all problem joins")
            see.is(results[0])
            res.render("pages/dashboard", { data: results, layout: "main", title: "Dashboard", subtitle: "What marks out good thinking is that it is precise." })
        }
    } catch (error) {
        console.log("error fetching dashboard", error)
        let stringed = JSON.stringify(error)
        res.render("pages/error", { layout: "plain", title: "Error", subtitle: "404", error: stringed })
    }
})


router.get("/calendar/:user_id", verifyLogin, async(req, res, next) => {
    let user_id = parseInt(req.params.user_id)
    let results;
    try {
        results = await noobs.getAllTaskJoins(knex, user_id)
        res.render("pages/calendar", { data: results, layout: "main", title: "Your Diary", subtitle: "Dare to be a bit odd." })
    } catch (error) {
        res.render("pages/error", { layout: "plain", title: "Error", subtitle: "404", error: stringed })
    }
})

router.get("/table/:user_id", verifyLogin, async(req, res, next) => {
    let user_id = parseInt(req.params.user_id)
    let results;
    try {
        results = await noobs.getAllProblemJoins(knex, user_id)
        res.render("pages/table", { data: results, layout: "main", title: "See what's important", subtitle: "Pay closer attention to your real concerns; be brave enough to hold onto them even when they find no immediate echo around you." })
    } catch (error) {
        res.render("pages/error", { layout: "plain", title: "Error", subtitle: "404", error: stringed })
    }
})


router.get("/profile/:user_id", verifyLogin, async(req, res, next) => {
    let user_id = parseInt(req.params.user_id)
    let results;
    try {
        // maybe filter this to just get public problems 
        results = await noobs.getAllProblemJoins(knex, user_id)
        res.render("pages/profile", { data: results, layout: "main", title: "You", subtitle: "In the minds of geniuses, we find - once more - our own neglected thoughts." })
    } catch (error) {
        res.render("pages/error", { layout: "plain", title: "Error", subtitle: "404", error: stringed })
    }
})

router.get("/settings/:user_id", verifyLogin, async(req, res, next) => {
    let user_id = parseInt(req.params.user_id)
    let results;
    try {
        results = await noobs.getAllProblemJoins(knex, user_id)
        res.render("pages/settings", { data: results, layout: "main", title: "Settings", subtitle: "Are you paying attention?" })
    } catch (error) {
        res.render("pages/error", { layout: "plain", title: "Error", subtitle: "404", error: stringed })
    }
})

module.exports = router;