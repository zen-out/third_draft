const { see } = require("code_clarity")
const make_legit = require("make_legit")
const { upset } = require("whats_wrong")
const express = require("express")
const noobs = require("backend_for_noobs")
const router = express.Router()
const { knex } = require("./knex")


router.get("/api/user/:user_id/problem", async(req, res, next) => {
    let user_id = parseInt(req.params.user_id)
    let results;
    try {
        results = await noobs.getAllProblemJoins(knex, user_id)
        console.log(results)
    } catch (error) {
        res.send(upset("get" + error, "get.js", "should be able to get problems")).status(400)
    }
    res.send(results).status(200)
})



router.get("/api/user/:user_id/cheatsheet", async(req, res, next) => {
    let user_id = parseInt(req.params.user_id)
    let results;
    try {
        results = await noobs.getAllCheatsheetJoins(knex, user_id)
    } catch (error) {
        res.send(upset("get", "get.js", "should be able to get problems")).status(400)
    }
    res.send(results).status(200)
})

router.get("/api/user/:user_id/task", async(req, res, next) => {
    let user_id = parseInt(req.params.user_id)
    let results;
    try {
        results = await noobs.getAllTaskJoins(knex, user_id)
    } catch (error) {
        res.send(upset("get", "get.js", "should be able to get problems")).status(400)
    }
    res.send(results).status(200)
})

router.get("/api/user/:user_id/tag_snippet", async(req, res, next) => {
    let user_id = parseInt(req.params.user_id)
    let results;
    try {
        results = await noobs.getAllTagSnippetJoins(knex, user_id)
    } catch (error) {
        res.send(upset("get", "get.js", "should be able to get problems")).status(400)
    }
    res.send(results).status(200)
})


router.get("/api/user/:user_id/problem/:problem_id", async(req, res, next) => {
    let user_id = parseInt(req.params.user_id)
    let problem_id = parseInt(req.params.problem_id)
    let results;
    try {
        results = await noobs.getOneProblemJoin(knex, user_id, problem_id)
    } catch (error) {
        res.send(upset("get", "get.js", "should be able to get problems")).status(400)
    }
    res.send(results).status(200)
})


router.get("/api/user/:user_id/cheatsheet/:cheatsheet_id", async(req, res, next) => {
    let user_id = parseInt(req.params.user_id)
    let id = parseInt(req.params.cheatsheet_id)
    let results;
    try {
        results = await noobs.getOneCheatsheetJoin(knex, user_id, id)
    } catch (error) {
        res.send(upset("get", "get.js", "should be able to get problems")).status(400)
    }
    res.send(results).status(200)
})



router.get("/api/user/:user_id/task/:task_id", async(req, res, next) => {
    let user_id = parseInt(req.params.user_id)
    let id = parseInt(req.params.task_id)
    let results;
    try {
        results = await noobs.getOneTaskJoin(knex, user_id, id)
    } catch (error) {
        res.send(upset("get", "get.js", "should be able to get problems")).status(400)
    }
    res.send(results).status(200)
})


router.get("/api/user/:user_id/tag_snippet/:tag_snippet_id", async(req, res, next) => {
    let user_id = parseInt(req.params.user_id)
    let id = parseInt(req.params.tag_snippet_id)
    let results;
    try {
        results = await noobs.getOneTagSnippetJoin(knex, user_id, id)
    } catch (error) {
        res.send(upset("get", "get.js", "should be able to get problems")).status(400)
    }
    res.send(results).status(200)
})


module.exports = router