const { see } = require("code_clarity")
const make_legit = require("make_legit")
const { upset } = require("whats_wrong")
const express = require("express")
const noobs = require("backend_for_noobs")
const router = express.Router()

const { knex } = require("./knex")
router.post("/api/user/:user_id/problem", async(req, res, next) => {
    let user_id = parseInt(req.params.user_id)
    req.body["user_id"] = user_id;
    let posted;
    try {
        posted = await noobs.postProblem(knex, req.body)
        see.should("be able to get object back")
        see.is(posted)
    } catch (error) {
        res.send(upset(`should be able to post to problem task: ${user_id}, ${req.body}`, "/api/user/:user_id/problem", "should be able to post task")).status(400)
    }
    res.send(posted).status(200)
})


router.post("/api/user/:user_id/cheatsheet", async(req, res, next) => {
    let user_id = parseInt(req.params.user_id)
    req.body["user_id"] = user_id;
    let posted;
    try {
        posted = await noobs.postCheatsheet(knex, req.body)
    } catch (error) {
        res.send(upset(`should be able to post to problem task: ${user_id}, ${req.body}`, "/api/user/:user_id/cheatsheet", "should be able to post task")).status(400)
    }

    res.send(posted).status(200)
})

router.post("/api/user/:user_id/tag_snippet", async(req, res, next) => {
    let user_id = parseInt(req.params.user_id)
    req.body["user_id"] = user_id;
    let posted;
    try {
        posted = await noobs.postTagSnippet(knex, req.body)
    } catch (error) {
        res.send(upset(`should be able to post to problem task: ${user_id}, ${req.body}`, "/api/user/:user_id/tag_snippet", "should be able to post task")).status(400)
    }

    res.send(posted).status(200)
})
router.post("/api/user/:user_id/task", async(req, res, next) => {
    let user_id = parseInt(req.params.user_id)
    req.body["user_id"] = user_id;
    let posted;
    try {
        posted = await noobs.postTask(knex, req.body)
    } catch (error) {
        res.send(upset(`should be able to post to problem task: ${user_id}, ${req.body}`, "/api/user/:user_id/tag_snippet", "should be able to post task")).status(400)
    }

    res.send(posted).status(200)
})
router.post("/api/user/:user_id/problem_task", async(req, res, next) => {
    let user_id = parseInt(req.params.user_id)
    req.body["user_id"] = user_id;
    let problem_id = parseInt(req.body.problem_id)
    let task_id = parseInt(req.body.task_id)
    let posted;
    try {
        posted = await noobs.addTaskToProblem(knex, user_id, problem_id, task_id)
    } catch (error) {
        res.send(upset(`should be able to post to problem task: ${user_id}, ${problem_id}, ${task_id}`, "post.js", "should be able to post task")).status(400)
    }
    res.send(posted).status(200)
})
router.post("/api/user/:user_id/problem_cheatsheet", async(req, res, next) => {
    let user_id = parseInt(req.params.user_id)
    req.body["user_id"] = user_id;
    let problem_id = parseInt(req.body.problem_id)
    let cheatsheet_id = parseInt(req.body.cheatsheet_id)
    let posted;
    try {
        posted = await noobs.addCheatsheetToProblem(knex, user_id, problem_id, cheatsheet_id)
    } catch (error) {
        res.send(upset(`should be able to post to problem task: ${user_id}, ${problem_id}, ${cheatsheet_id}`, "/api/user/:user_id/problem_cheatsheet", "should be able to post task")).status(400)
    }

    res.send(posted).status(200)
})
router.post("/api/user/:user_id/problem_tag_snippet", async(req, res, next) => {
    let user_id = parseInt(req.params.user_id)
    req.body["user_id"] = user_id;
    let problem_id = parseInt(req.body.problem_id)
    let tag_snippet_id = parseInt(req.body.tag_snippet_id)
    let posted;
    try {
        posted = await noobs.addTagSnippetToProblem(knex, user_id, problem_id, tag_snippet_id)
    } catch (error) {
        res.send(upset(` should be able to post to problem task: ${user_id}, ${problem_id}, ${tag_snippet_id}`, "/api/user/:user_id/problem_tag_snippet", "should be able to post task")).status(400)
    }

    res.send(posted).status(200)
})
router.post("/api/user/:user_id/cheatsheet_task", async(req, res, next) => {
    let user_id = parseInt(req.params.user_id)
    req.body["user_id"] = user_id;
    let cheatsheet_id = parseInt(req.body.cheatsheet_id)
    let task_id = parseInt(req.body.task_id)
    let posted;
    try {
        posted = await noobs.addTaskToCheatsheet(knex, user_id, cheatsheet_id, task_id)
    } catch (error) {
        res.send(upset(` should be able to post to problem task: ${user_id}, ${problem_id}, ${task_id}`, "/api/cheatsheet_task", "should be able to post task")).status(400)
    }
    res.send(posted).status(200)
})

router.post("/api/user/:user_id/cheatsheet_tag_snippet", async(req, res, next) => {
    let user_id = parseInt(req.params.user_id)
    req.body["user_id"] = user_id;
    let cheatsheet_id = parseInt(req.body.cheatsheet_id)
    let tag_snippet_id = parseInt(req.body.tag_snippet_id)
    let posted;
    try {
        posted = await noobs.addTagSnippetToCheatsheet(knex, user_id, cheatsheet_id, tag_snippet_id)
    } catch (error) {
        res.send(upset(`${user_id}, ${cheatsheet_id}, ${tag_snippet_id}`, "/api/cheatsheet_tag_snippet", "should be able to post task")).status(400)
    }
    res.send(posted).status(200)
})

router.post("/api/user/:user_id/task_tag_snippet", async(req, res, next) => {
    let user_id = parseInt(req.params.user_id)
    req.body["user_id"] = user_id;
    let task_id = parseInt(req.body.task_id)
    let tag_snippet_id = parseInt(req.body.tag_snippet_id)
    let posted;
    try {
        posted = await noobs.addTagSnippetToTask(knex, user_id, task_id, tag_snippet_id)
    } catch (error) {
        res.send(upset(`${user_id}, ${task_id}, ${tag_snippet_id}`, "/api/task_tag_snippet", "should be able to post task")).status(400)
    }
    res.send(posted).status(200)
})

async function testFile() {
    see.should("write what the function should do")
    see.is()
    see.done("change to done when done")
}

module.exports = router